From b89faf5c24d75309c4ae3cb921c72d7e59621950 Mon Sep 17 00:00:00 2001
From: Chris Sides <Christopher.Sides@hpe.com>
Date: Mon, 21 Jul 2025 13:08:18 -0500
Subject: [PATCH] fansensor can now switch between hpe and other fans, and is
 more clear in path naming

Upstream-Status: Pending
---
 src/fan/FanMain.cpp | 52 +++++++++++++++++++++++++++++++--------------
 1 file changed, 36 insertions(+), 16 deletions(-)

diff --git a/src/fan/FanMain.cpp b/src/fan/FanMain.cpp
index f210f7f..ebac9e0 100644
--- a/src/fan/FanMain.cpp
+++ b/src/fan/FanMain.cpp
@@ -198,14 +198,32 @@ bool findPwmPath(const std::filesystem::path& directory, unsigned int pwm,
     return true;
 }
 
-// The argument to this function should be the fanN_input file that we want to
-// enable. The function will locate the corresponding fanN_enable file if it
-// exists. Note that some drivers don't provide this file if the sensors are
-// always enabled.
-void enableFanInput(const std::filesystem::path& fanInputPath)
+//takes a hwmon pwm (output) handle as a parameter
+//returns 'fanN_input' hwmon path if it exists, otherwise returns the original path 'pwmN'
+//to allow for controlling fans with no acessible tachometer
+std::filesystem::path getFanInputPath(const std::filesystem::path& fanOutputPath)
+{
+    std::string path(fanOutputPath.string());
+    boost::replace_last(path, "pwm", "fan"); //look for fanN_input
+    path+="_input";
+    std::filesystem::path fanInputPath(path);
+
+    if (std::filesystem::exists(fanInputPath))
+    {
+        return fanInputPath;
+    }
+
+    return fanOutputPath;
+}
+
+// The argument to this function should be the 'pwmN' file associated with the
+// fanN_input that we want to enable. The function will locate the
+// corresponding fanN_enable file if it exists. Note that some drivers don't
+// provide this file if the sensors are always enabled.
+void enableFanInput(const std::filesystem::path& fanOutputPath)
 {
     std::error_code ec;
-    std::string path(fanInputPath.string());
+    std::string path(fanOutputPath.string());
     boost::replace_last(path, "pwm", "fan");
     path+="_enable";
 
@@ -294,25 +312,25 @@ void createSensors(
                                                     const ManagedObjectType&
                                                         sensorConfigurations) {
         bool firstScan = sensorsChanged == nullptr;
-        std::vector<std::filesystem::path> paths;
+        std::vector<std::filesystem::path> fanOutputPaths;
         if (!findFiles(std::filesystem::path("/sys/class/hwmon"),
-                       R"(pwm\d+)", paths))
+                       R"(pwm\d+)", fanOutputPaths))
         {
-            lg2::error("No fan sensors in system");
+            lg2::error("No fan pwm controls in system");
             return;
         }
 
         // iterate through all found fan sensors, and try to match them with
         // configuration
-        for (const auto& path : paths)
+        for (const auto& fanOutputPath : fanOutputPaths)
         {
             std::smatch match;
-            std::string pathStr = path.string();
+            std::string pathStr = fanOutputPath.string();
 
             std::regex_search(pathStr, match, inputRegex);
             std::string indexStr = *(match.begin() + 1);
 
-            std::filesystem::path directory = path.parent_path();
+            std::filesystem::path directory = fanOutputPath.parent_path();
             FanTypes fanType = getFanType(directory);
             std::string cfgIntf = configInterfaceName(sensorTypes[fanType]);
 
@@ -396,7 +414,7 @@ void createSensors(
             if (sensorData == nullptr)
             {
                 lg2::error("failed to find match for '{PATH}'", "PATH",
-                           path.string());
+                           fanOutputPath.string());
                 continue;
             }
 
@@ -406,7 +424,7 @@ void createSensors(
             {
                 lg2::error(
                     "could not determine configuration name for '{PATH}'",
-                    "PATH", path.string());
+                    "PATH", fanOutputPath.string());
                 continue;
             }
             std::string sensorName =
@@ -624,12 +642,14 @@ void createSensors(
 
             findLimits(limits, baseConfiguration);
 
-            enableFanInput(path);
+            enableFanInput(fanOutputPath);
+
+            auto fanInputPath = getFanInputPath(fanOutputPath);
 
             auto& tachSensor = tachSensors[sensorName];
             tachSensor = nullptr;
             tachSensor = std::make_shared<TachSensor>(
-                path.string(), baseType, objectServer, dbusConnection,
+                fanInputPath.string(), baseType, objectServer, dbusConnection,
                 presenceGpio, redundancy, io, sensorName,
                 std::move(sensorThresholds), *interfacePath, limits, powerState,
                 led);
